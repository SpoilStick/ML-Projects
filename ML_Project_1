{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMvIkwQtYHIOl4SiEp03zzm"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**Assignment 1**"
      ],
      "metadata": {
        "id": "oeYaAeIazR9c"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "NEpBuxNAw1Jl"
      },
      "outputs": [],
      "source": [
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "from sklearn import datasets\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from pandas.plotting import scatter_matrix\n",
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Load Dataset\n",
        "diabetes = datasets.load_diabetes()\n",
        "\n",
        "data = diabetes.data\n",
        "Y = diabetes.target # labels\n",
        "features = diabetes.feature_names # Not included in the data"
      ],
      "metadata": {
        "id": "1_ATT1BKxXB4"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        " print(diabetes.DESCR)\n",
        "# data.hist(bins=50,figsize=(20,15))\n",
        "# X.hist(bins=50,figsize=(20,15))"
      ],
      "metadata": {
        "id": "syszuI9T8PLa",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ee8bad47-ff29-4c5c-8de1-66e74b20efa8"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            ".. _diabetes_dataset:\n",
            "\n",
            "Diabetes dataset\n",
            "----------------\n",
            "\n",
            "Ten baseline variables, age, sex, body mass index, average blood\n",
            "pressure, and six blood serum measurements were obtained for each of n =\n",
            "442 diabetes patients, as well as the response of interest, a\n",
            "quantitative measure of disease progression one year after baseline.\n",
            "\n",
            "**Data Set Characteristics:**\n",
            "\n",
            "  :Number of Instances: 442\n",
            "\n",
            "  :Number of Attributes: First 10 columns are numeric predictive values\n",
            "\n",
            "  :Target: Column 11 is a quantitative measure of disease progression one year after baseline\n",
            "\n",
            "  :Attribute Information:\n",
            "      - age     age in years\n",
            "      - sex\n",
            "      - bmi     body mass index\n",
            "      - bp      average blood pressure\n",
            "      - s1      tc, total serum cholesterol\n",
            "      - s2      ldl, low-density lipoproteins\n",
            "      - s3      hdl, high-density lipoproteins\n",
            "      - s4      tch, total cholesterol / HDL\n",
            "      - s5      ltg, possibly log of serum triglycerides level\n",
            "      - s6      glu, blood sugar level\n",
            "\n",
            "Note: Each of these 10 feature variables have been mean centered and scaled by the standard deviation times `n_samples` (i.e. the sum of squares of each column totals 1).\n",
            "\n",
            "Source URL:\n",
            "https://www4.stat.ncsu.edu/~boos/var.select/diabetes.html\n",
            "\n",
            "For more information see:\n",
            "Bradley Efron, Trevor Hastie, Iain Johnstone and Robert Tibshirani (2004) \"Least Angle Regression,\" Annals of Statistics (with discussion), 407-499.\n",
            "(https://web.stanford.edu/~hastie/Papers/LARS/LeastAngle_2002.pdf)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plots variables against one another\n",
        "scatter_matrix(pd.DataFrame(data), figsize=(12,8))"
      ],
      "metadata": {
        "id": "UMVn3H7BYOte"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "main_feature = \"bmi\"\n",
        "# From what I know, bmi (and being overweight) increases risk for diabetes\n",
        "col = features.index(main_feature)\n",
        "X = data[:,col] # data"
      ],
      "metadata": {
        "id": "MaRA1VBHDXbb"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=20/len(data), random_state=42) # Create training and testing data and labels\n",
        "\n",
        "# Make arrays 2d\n",
        "X_train = X_train.reshape(-1,1)\n",
        "Y_train = Y_train.reshape(-1,1)"
      ],
      "metadata": {
        "id": "PeS6-N_i2GPM"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Train regression\n",
        "lin_reg = LinearRegression()\n",
        "lin_reg.fit(X_train, Y_train)"
      ],
      "metadata": {
        "id": "hTDevCH_5aus",
        "outputId": "ff17b700-e860-44af-f91d-fff9c60785a3",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Print statistics\n",
        "targets = Y_train[:10]\n",
        "predictions = lin_reg.predict(X_train[:10])\n",
        "print(\"Predictions:\", predictions)\n",
        "\n",
        "RMSE = mean_squared_error(targets, predictions, squared=False)\n",
        "print(\"RMSE:\", RMSE)"
      ],
      "metadata": {
        "id": "bTc3UFi5BHbK",
        "outputId": "f35a9cb0-d4df-4c92-eacc-e08ce71f398f",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Predictions: [[189.00193838]\n",
            " [110.19527423]\n",
            " [103.97369548]\n",
            " [173.4479915 ]\n",
            " [194.18658733]\n",
            " [165.15255317]\n",
            " [208.70360441]\n",
            " [134.04465943]\n",
            " [ 80.12431028]\n",
            " [130.93387006]]\n",
            "RMSE: 59.21130205856623\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot linear regression\n",
        "m = np.squeeze(lin_reg.coef_)\n",
        "b = np.squeeze(lin_reg.intercept_)\n",
        "\n",
        "x = [X.min(), X.max()]\n",
        "y = m * x + b\n",
        "\n",
        "print(x,y)\n",
        "\n",
        "plt.scatter(X, Y)\n",
        "plt.plot(x,y, color='g')\n",
        "plt.title(\"BMI and Diabetes regression\")\n",
        "plt.xlabel(\"BMI\")\n",
        "plt.ylabel(\"Diabetes Progresion\")"
      ],
      "metadata": {
        "id": "M3QlfIQZOago",
        "outputId": "a43eec32-0617-4ebb-e305-2cd747caf7e2",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        }
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-0.0902752958985185, 0.17055522598066] [ 64.57036341 315.50737293]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Diabetes Progresion')"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}