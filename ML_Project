{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNihdT6VBMjHXCZdhvRRa2c"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import seaborn as sns\n",
        "\n",
        "from seaborn import load_dataset\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn import svm\n",
        "from sklearn.linear_model import SGDClassifier\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.metrics import roc_curve\n",
        "from sklearn.model_selection import cross_val_predict\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.model_selection import GridSearchCV\n",
        "from sklearn.model_selection import learning_curve"
      ],
      "metadata": {
        "id": "nDeYAYpF6mDR"
      },
      "execution_count": 92,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Part 1: Data Exploration"
      ],
      "metadata": {
        "id": "BVinIV_p7TZa"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 100,
      "metadata": {
        "id": "FpwfF-0o3vO8"
      },
      "outputs": [],
      "source": [
        "# Load dataset\n",
        "data = load_dataset(\"titanic\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Find missing values\n",
        "data.count()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d7L8eYVFQfB_",
        "outputId": "69465d86-571b-4b76-d464-1e72fdf49894"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "survived       891\n",
              "pclass         891\n",
              "sex            891\n",
              "age            714\n",
              "sibsp          891\n",
              "parch          891\n",
              "fare           891\n",
              "embarked       889\n",
              "class          891\n",
              "who            891\n",
              "adult_male     891\n",
              "deck           203\n",
              "embark_town    889\n",
              "alive          891\n",
              "alone          891\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 101
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.head()\n",
        "# \"sex\", \"embarked\", \"class\", \"who\", \"adult_male\", \"deck\", \"embark_town\", and \"alive\" are categorical"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "rGyoIPpOTMeq",
        "outputId": "dae89a7c-a97b-40fb-ed58-7ae3cbd5e6c8"
      },
      "execution_count": 102,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   survived  pclass     sex   age  sibsp  parch     fare embarked  class  \\\n",
              "0         0       3    male  22.0      1      0   7.2500        S  Third   \n",
              "1         1       1  female  38.0      1      0  71.2833        C  First   \n",
              "2         1       3  female  26.0      0      0   7.9250        S  Third   \n",
              "3         1       1  female  35.0      1      0  53.1000        S  First   \n",
              "4         0       3    male  35.0      0      0   8.0500        S  Third   \n",
              "\n",
              "     who  adult_male deck  embark_town alive  alone  \n",
              "0    man        True  NaN  Southampton    no  False  \n",
              "1  woman       False    C    Cherbourg   yes  False  \n",
              "2  woman       False  NaN  Southampton   yes   True  \n",
              "3  woman       False    C  Southampton   yes  False  \n",
              "4    man        True  NaN  Southampton    no   True  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c8b6bb00-b942-4c20-a31a-ff2483a0234d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>survived</th>\n",
              "      <th>pclass</th>\n",
              "      <th>sex</th>\n",
              "      <th>age</th>\n",
              "      <th>sibsp</th>\n",
              "      <th>parch</th>\n",
              "      <th>fare</th>\n",
              "      <th>embarked</th>\n",
              "      <th>class</th>\n",
              "      <th>who</th>\n",
              "      <th>adult_male</th>\n",
              "      <th>deck</th>\n",
              "      <th>embark_town</th>\n",
              "      <th>alive</th>\n",
              "      <th>alone</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>22.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>7.2500</td>\n",
              "      <td>S</td>\n",
              "      <td>Third</td>\n",
              "      <td>man</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>no</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>71.2833</td>\n",
              "      <td>C</td>\n",
              "      <td>First</td>\n",
              "      <td>woman</td>\n",
              "      <td>False</td>\n",
              "      <td>C</td>\n",
              "      <td>Cherbourg</td>\n",
              "      <td>yes</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>female</td>\n",
              "      <td>26.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>7.9250</td>\n",
              "      <td>S</td>\n",
              "      <td>Third</td>\n",
              "      <td>woman</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>yes</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>female</td>\n",
              "      <td>35.0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>53.1000</td>\n",
              "      <td>S</td>\n",
              "      <td>First</td>\n",
              "      <td>woman</td>\n",
              "      <td>False</td>\n",
              "      <td>C</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>yes</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>male</td>\n",
              "      <td>35.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>8.0500</td>\n",
              "      <td>S</td>\n",
              "      <td>Third</td>\n",
              "      <td>man</td>\n",
              "      <td>True</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Southampton</td>\n",
              "      <td>no</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c8b6bb00-b942-4c20-a31a-ff2483a0234d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c8b6bb00-b942-4c20-a31a-ff2483a0234d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c8b6bb00-b942-4c20-a31a-ff2483a0234d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 102
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the number of deaths for certain demographics\n",
        "def death_demographics(df, x_axis):\n",
        "  for x in df[x_axis].unique():\n",
        "    # Limit the dataframe to one demographic\n",
        "    deaths = df.loc[df[x_axis]==x]\n",
        "    # Limit the dataframe to only deaths\n",
        "    deaths = deaths.loc[deaths[\"survived\"]==0]\n",
        "\n",
        "    print(\"{0} {1}: {2}\".format(x_axis, x, deaths[\"survived\"].size))"
      ],
      "metadata": {
        "id": "4HXsvTwJZCqL"
      },
      "execution_count": 103,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 449 men died, 100 women died\n",
        "death_demographics(data, \"adult_male\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fz2qWVJTTexJ",
        "outputId": "531a2c74-9e3e-4f5b-d29d-d0b4f94d5feb"
      },
      "execution_count": 104,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "adult_male True: 449\n",
            "adult_male False: 100\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 80 in pclass 1 died, 97 in plcass 2 died, 372 in pclass 3 died\n",
        "death_demographics(data, \"pclass\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pEefX2BiZwxE",
        "outputId": "1e2f5d56-e9ff-4e61-e66f-5036596e0079"
      },
      "execution_count": 105,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "pclass 3: 372\n",
            "pclass 1: 80\n",
            "pclass 2: 97\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Distribution of \"fare\"\n",
        "data[[\"fare\", \"age\"]].hist(bins=50, figsize=(12,3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        },
        "id": "FRbN1bt9aFwP",
        "outputId": "6e37f613-4f16-4c47-af84-7cf369781ecc"
      },
      "execution_count": 106,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<matplotlib.axes._subplots.AxesSubplot object at 0x7ff0a4c34250>,\n",
              "        <matplotlib.axes._subplots.AxesSubplot object at 0x7ff0a4c5c050>]],\n",
              "      dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 106
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 864x216 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the median age per class\n",
        "age_dict = {}\n",
        "\n",
        "for x in data['pclass'].unique():\n",
        "    # Finding median/update age_dict\n",
        "    ages = data.loc[data['pclass']==x]['age']\n",
        "    ages = ages.dropna() # Boxplot data cannot have NaN\n",
        "  \n",
        "    age_dict[x] = ages.median()\n",
        "\n",
        "    # Make boxplot\n",
        "    plt.figure()\n",
        "    plt.title('Boxplot of PClass {0}'.format(x))\n",
        "    plt.boxplot(ages)\n",
        "\n",
        "print('Median age per class: {0}'.format(age_dict))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 826
        },
        "id": "w2OZcNJdaeN-",
        "outputId": "3f61d185-0295-452b-b9a5-7c9558628a58"
      },
      "execution_count": 107,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Median age per class: {3: 24.0, 1: 37.0, 2: 29.0}\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Part 2: Data Cleansing"
      ],
      "metadata": {
        "id": "Ag38Lrm6Qd7q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove column; too many missing values\n",
        "data.drop(\"deck\", axis=1)"
      ],
      "metadata": {
        "id": "OHiqihwl-R3w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Replace the age with the median age of that class\n",
        "def impute_age(pclass):\n",
        "  if type(pclass) == int:\n",
        "    return(age_dict[pclass])\n",
        "\n",
        "  elif type(pclass) == pd.Series:\n",
        "    for x in pclass:\n",
        "      x = age_dict[x]\n",
        "      return x\n",
        "\n",
        "data['age'] = impute_age(data['pclass'])"
      ],
      "metadata": {
        "id": "msl1EQePkpEx"
      },
      "execution_count": 109,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove remaining null values\n",
        "data.dropna()"
      ],
      "metadata": {
        "id": "BF1iKi-QkJZ4"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Convert categorical variables into dummy variables\n",
        "data = pd.get_dummies(data=data, columns=[\"sex\", \"embarked\", \"class\", \"who\", \"adult_male\", \"deck\", \"embark_town\", \"alive\", \"alone\"])"
      ],
      "metadata": {
        "id": "VueEoBhkklEy"
      },
      "execution_count": 111,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split data into test and train\n",
        "X = data\n",
        "y = X.pop('survived')\n",
        "\n",
        "X_train, X_test, y_train, y_test =  train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "XuxN1kfykm18"
      },
      "execution_count": 112,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Part 3: Model Training"
      ],
      "metadata": {
        "id": "iDNwy72gQhPD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# List of models to use\n",
        "models = [\n",
        "    LogisticRegression(max_iter=1000),\n",
        "    svm.SVC(probability=True),\n",
        "    SGDClassifier(max_iter=1000,loss=\"hinge\")\n",
        "]"
      ],
      "metadata": {
        "id": "39j1Lu7JQlxM"
      },
      "execution_count": 113,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def evaluate_model(model, X, y):\n",
        "  model.fit(X, y)\n",
        "  y_pred = model.predict(X)\n",
        "\n",
        "  print(classification_report(y, y_pred))\n",
        "  print(confusion_matrix(y, y_pred))\n",
        "\n",
        "  # Roc Score/graph\n",
        "  scores = cross_val_predict(model, X , y, cv=3, method=\"decision_function\")\n",
        "  print(roc_auc_score(y, scores))\n",
        "\n",
        "  false_pos_rate, true_pos_rate, thresholds = roc_curve(y, scores)\n",
        "\n",
        "  plt.figure()\n",
        "  plt.axis([0, 1, 0, 1])\n",
        "\n",
        "  plt.plot(false_pos_rate, true_pos_rate)\n",
        "  plt.plot([0, 1], [0, 1], linestyle='dashed')\n",
        "  plt.xlabel('False Positive Rate (Sensitvity)')\n",
        "  plt.ylabel('True Positive Rate (Recall)')"
      ],
      "metadata": {
        "id": "bu3R6XboZFKF"
      },
      "execution_count": 146,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "for model in models:\n",
        "  evaluate_model(model, X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "90yvvuPGQncQ",
        "outputId": "016cda4c-4b52-4c04-fb17-16d5f43e52cc"
      },
      "execution_count": 147,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       444\n",
            "           1       1.00      1.00      1.00       268\n",
            "\n",
            "    accuracy                           1.00       712\n",
            "   macro avg       1.00      1.00      1.00       712\n",
            "weighted avg       1.00      1.00      1.00       712\n",
            "\n",
            "[[444   0]\n",
            " [  0 268]]\n",
            "1.0\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.68      0.93      0.79       444\n",
            "           1       0.72      0.27      0.39       268\n",
            "\n",
            "    accuracy                           0.69       712\n",
            "   macro avg       0.70      0.60      0.59       712\n",
            "weighted avg       0.69      0.69      0.64       712\n",
            "\n",
            "[[415  29]\n",
            " [195  73]]\n",
            "0.8906901304289363\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.54      0.70       444\n",
            "           1       0.56      1.00      0.72       268\n",
            "\n",
            "    accuracy                           0.71       712\n",
            "   macro avg       0.78      0.77      0.71       712\n",
            "weighted avg       0.83      0.71      0.71       712\n",
            "\n",
            "[[238 206]\n",
            " [  1 267]]\n",
            "0.9644934113217696\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Part 4: Model Testing"
      ],
      "metadata": {
        "id": "Y48IzsqJQl4m"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Models[1] is SVC\n",
        "\n",
        "print(SVC_Model)\n",
        "SVC_Model = models[1]\n"
      ],
      "metadata": {
        "id": "WYMrJ_9dQpVs",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6513f81f-bd75-4635-e821-953a5f99b8fb"
      },
      "execution_count": 118,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVC(probability=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Create pipeline\n",
        "pipe = Pipeline([('scaler', StandardScaler()), ('SVC_Model', SVC_Model)])"
      ],
      "metadata": {
        "id": "2G-WW3X4Vu2l"
      },
      "execution_count": 119,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "parameters = {\n",
        "  'SVC_Model__kernel': ['rbf'], \n",
        "  'SVC_Model__gamma': [0.0001, 0.001, 0.01, 0.1, 1],\n",
        "  'SVC_Model__C': [1,10,50,100,200,300]\n",
        "}"
      ],
      "metadata": {
        "id": "2i7ftv1vWAxK"
      },
      "execution_count": 120,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Grid search for parameters\n",
        "grid_search = GridSearchCV(pipe, parameters)\n",
        "grid_search.fit(X_train, y_train)\n",
        "#print(grid_search.get_params().keys())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LtdfPiVcWnue",
        "outputId": "68946f20-9c45-4a27-9da1-5f75bd95c0be"
      },
      "execution_count": 121,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GridSearchCV(estimator=Pipeline(steps=[('scaler', StandardScaler()),\n",
              "                                       ('SVC_Model', SVC(probability=True))]),\n",
              "             param_grid={'SVC_Model__C': [1, 10, 50, 100, 200, 300],\n",
              "                         'SVC_Model__gamma': [0.0001, 0.001, 0.01, 0.1, 1],\n",
              "                         'SVC_Model__kernel': ['rbf']})"
            ]
          },
          "metadata": {},
          "execution_count": 121
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(\"Best parameters: {0}, best score: {1}\".format(grid_search.best_params_, grid_search.best_score_))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zEVf0FpSW38V",
        "outputId": "4cf62d75-f769-4d30-a67f-f10c83c2ba41"
      },
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Best parameters: {'SVC_Model__C': 1, 'SVC_Model__gamma': 0.001, 'SVC_Model__kernel': 'rbf'}, best score: 1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Get the best estimator and apply to test set\n",
        "best_estimator = grid_search.best_estimator_\n",
        "\n",
        "evaluate_model(best_estimator, X_test, y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 491
        },
        "id": "O1Xh2x--W7ns",
        "outputId": "014d338f-11ce-4f9b-8b91-36cb3c10e1ab"
      },
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.94      1.00      0.97       105\n",
            "           1       1.00      0.91      0.95        74\n",
            "\n",
            "    accuracy                           0.96       179\n",
            "   macro avg       0.97      0.95      0.96       179\n",
            "weighted avg       0.96      0.96      0.96       179\n",
            "\n",
            "[[105   0]\n",
            " [  7  67]]\n",
            "0.9712998712998712\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the learning curve of the best estimator\n",
        "train_sizes, train_scores, test_scores = learning_curve(best_estimator, X_train, y_train)"
      ],
      "metadata": {
        "id": "YnFtJ2jTZtrB"
      },
      "execution_count": 127,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Calculate the mean and standard deviation of training and validation data\n",
        "train_scores_mean = np.mean(train_scores, axis=1)\n",
        "train_scores_std = np.std(train_scores, axis=1)\n",
        "\n",
        "test_scores_mean = np.mean(test_scores, axis=1)\n",
        "test_scores_std = np.std(test_scores, axis=1)"
      ],
      "metadata": {
        "id": "eJCW3Marc5_3"
      },
      "execution_count": 138,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure()\n",
        "plt.title(\"Learning Curve\")\n",
        "plt.ylabel(\"Score\")\n",
        "plt.xlabel(\"Training Examples\")\n",
        "plt.grid()\n",
        "\n",
        "# Plot each line\n",
        "plt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\n",
        "plt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\n",
        "\n",
        "# Shading each line\n",
        "plt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\n",
        "plt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\n",
        "# This seems to be standard learning-curve practice\n",
        "\n",
        "plt.legend()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "M54nwMoYaoFx",
        "outputId": "2ae6dab2-04cb-46af-ba1c-caadd1008121"
      },
      "execution_count": 141,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x7ff0a45bdbd0>"
            ]
          },
          "metadata": {},
          "execution_count": 141
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# The best estimator model keeps improving in score and reaches near optimal performance afters about 450 examples"
      ],
      "metadata": {
        "id": "-7TN-NumfOD-"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}